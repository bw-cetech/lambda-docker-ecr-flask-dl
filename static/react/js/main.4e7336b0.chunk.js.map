{"version":3,"sources":["logo.svg","keras.ico","tensorflow.ico","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","onPreviewDrop","files","setState","state","concat","alert","file","imagePreviewUrl","_handleImageChange","bind","_handleSubmit","e","preventDefault","reader","FileReader","target","onloadend","result","readAsDataURL","this","$imagePreview","id","name","src","thumbnail","className","logo","alt","method","action","enctype","style","color","type","multiple","onChange","onClick","value","Button","backgroundColor","variant","href","window","token","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,2B,sHCA3CD,EAAOC,QAAU,IAA0B,4B,mBCA3CD,EAAOC,QAAU,IAA0B,iC,uKC+H5BC,G,oEA3Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoCRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZD,MAAO,EAAKE,MAAMF,MAAMG,OAAOH,KAEhCI,MAAM,gBAvCP,EAAKF,MAAQ,CACXG,KAAM,GACNL,MAAO,GACPM,gBAAiB,IAEnB,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBARJ,E,0DAWLE,GACZA,EAAEC,mB,yCAIeD,GAAI,IAAD,OACpBA,EAAEC,iBAEF,IAAIC,EAAS,IAAIC,WACbR,EAAOK,EAAEI,OAAOd,MAAM,GAO1BY,EAAOG,UAAY,WACjB,EAAKd,SAAS,CACZI,KAAMA,EACNC,gBAAiBM,EAAOI,UAI5BJ,EAAOK,cAAcZ,K,+BAWb,IAEHC,EAAmBY,KAAKhB,MAAxBI,gBACDa,EAAgB,KAQlB,OAPEb,IACFa,EAAiB,yBAAKC,GAAG,gBAAgBC,KAAK,aAAaC,IAAKhB,EAAiBiB,WAAS,KAQxF,yBAAKC,UAAU,OAEf,4BAAQA,UAAU,cAChB,yBAAKF,IAAKG,IAAMD,UAAU,WAAWE,IAAI,aAK3C,0BAAMC,OAAO,OAAOC,OAAO,GAAGC,QAAQ,sBAAsBT,GAAG,YAC3D,uBAAGU,MAAO,CAACC,MAAOzB,EAAkB,cAAgB,YAApD,+CACA,2BAAOc,GAAG,eAAeY,KAAK,OAAOX,KAAK,OAAOY,UAAQ,EAACC,SAAUhB,KAAKX,qBACzE,4BAAQ4B,QAASjB,KAAKT,eAAtB,gBACA,2BAAOe,UAAU,YAAYQ,KAAK,SAASI,MAAM,WACjD,kBAACC,EAAA,EAAD,CAAQP,MAAO,CAACQ,gBAAiB,WAAYC,QAAQ,YAAYP,KAAK,SAASI,MAAM,UAArF,cACA,kBAACC,EAAA,EAAD,CAAQP,MAAO,CAACQ,gBAAiB,WAAYC,QAAQ,YACrDC,KAAK,kIACL1B,OAAO,UAFP,eAkBCK,EACD,kCACA,yBAAKC,GAAG,WAAWU,MAAO,CAACC,MAASU,OAAOC,MAAwB,UAAf,gBAApD,+BAA6GD,OAAOC,a,GA9F9GC,IAAMC,YCNJC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.4e7336b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"media/keras.6e2f5fde.ico\";","module.exports = __webpack_public_path__ + \"media/tensorflow.23c47738.ico\";","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import ImageUploader from 'react-images-upload';\r\nimport Button from '@material-ui/core/Button'; // Material-UI, the world's most popular React UI framework\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\nimport './Dnd.css';\r\nimport logo from './logo.svg';\r\nimport keras_logo from './keras.ico';\r\nimport tf_logo from './tensorflow.ico';\r\n\r\n// import DropZone from \"./dropzone/DropZone.js\";\r\nimport $ from 'jquery';\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: '',\r\n      files: [],\r\n      imagePreviewUrl: ''\r\n    };\r\n    this._handleImageChange = this._handleImageChange.bind(this);\r\n    this._handleSubmit = this._handleSubmit.bind(this);\r\n  }\r\n\r\n  _handleSubmit(e) {\r\n    e.preventDefault();\r\n    // TODO: do something with -> this.state.file\r\n  }\r\n\r\n  _handleImageChange(e) {\r\n    e.preventDefault();\r\n\r\n    let reader = new FileReader();\r\n    let file = e.target.files[0];\r\n    // localStorage.setItem('UploadedData', file);\r\n    // console.log(this.state.file)\r\n    // axios.post('https://tmpfiles.org/download/81437/', this.state.file, {onUploadProgress: progressEvent => {\r\n    //   console.log(progressEvent.loaded / progressEvent.total)\r\n    // }})\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        file: file,\r\n        imagePreviewUrl: reader.result\r\n      });\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n  }\r\n\r\n  onPreviewDrop = (files) => {\r\n    this.setState({\r\n      files: this.state.files.concat(files),\r\n     });\r\n     alert(\"Great Shot!\")\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let {imagePreviewUrl} = this.state;\r\n    let $imagePreview = null;\r\n    if (imagePreviewUrl) {\r\n      $imagePreview = (<img id='uploadedImage' name='formUpload' src={imagePreviewUrl} thumbnail />);\r\n    } else {\r\n      // $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\r\n    }\r\n\r\n\r\n      return (\r\n        \r\n        <div className=\"App\">\r\n      \r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"reactjs\" />\r\n          {/* <img src={tf_logo} id=\"tf_logo\" alt=\"tensorflow\" />\r\n          <img src={keras_logo} id=\"keras_logo\" alt=\"keras\" /> */}\r\n        </header>\r\n        \r\n        <form method=\"POST\" action=\"\" enctype=\"multipart/form-data\" id='mainForm'>\r\n            <p style={{color: imagePreviewUrl ? 'transparent' : '#ffffff'}} >Drag your files here or click in this area.</p>\r\n            <input id='dragDropArea' type=\"file\" name=\"file\" multiple onChange={this._handleImageChange} ></input>\r\n            <button onClick={this._handleSubmit}>UPLOAD IMAGE</button>\r\n            <input className=\"submitBtn\" type=\"submit\" value=\"Submit\" ></input>\r\n            <Button style={{backgroundColor: \"#90caf9\"}} variant=\"contained\" type=\"submit\" value=\"Submit\" >Run Script</Button>\r\n            <Button style={{backgroundColor: \"#f48fb1\"}} variant=\"contained\"\r\n            href=\"https://mybinder.org/v2/gh/ChangingEnergy/DL_MalariaClassification_TrainingOnly/master?filepath=DeepLearning_trainingOnly.ipynb\" \r\n            target=\"_blank\" >\r\n              Train Model\r\n            </Button> \r\n\r\n            {/* NB DragDropArea is a defined area in the dnd.css file and covers both the\r\n            drag and drop and upload button for now */}\r\n            {/* <input type=\"file\" id='dragDropArea' name=\"file\" multiple onDrop={this._onPreviewDrop}></input>\r\n            <p style={{color: imagePreviewUrl ? 'transparent' : '#ffffff'}} >Drag your files here or click in this area.</p>\r\n            <input type=\"file\" id='dragDropArea' name=\"file\" onChange={this._handleImageChange} />\r\n            <p><input type=\"file\" name=\"file\"></input></p>\r\n            <p><input type=\"submit\" value=\"Submit\"></input></p> */}\r\n            {/* <button type=\"submit\">Upload</button> */}\r\n            {/* <button onClick={this._handleSubmit}>UPLOAD IMAGE</button> */}\r\n            {/* <button type=\"submit\" id='runPython' formaction=\"www.bbc.co.uk\">Run Script</button> */}\r\n            {/* <Button style={{backgroundColor: \"#90caf9\"}} variant=\"contained\" type=\"submit\" value=\"Submit\">Run Script</Button> */}\r\n            \r\n            {$imagePreview}\r\n            <div> </div>\r\n            <div id='inferMsg' style={{color: !(window.token) ? 'transparent': '#ffffff' }}> Infected Cell Probability: {window.token}</div>\r\n        </form>\r\n\r\n\r\n        \r\n  \r\n  \r\n  \r\n  \r\n      </div>\r\n\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}